// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`ResizeBounding > classes > prefix > should have custom prefix (my-prefix) 1`] = `
DOMTokenList {
  "0": "my-prefixcontainer",
  "1": "my-prefixcontainer-5",
}
`;

exports[`ResizeBounding > classes > prefix > should have default prefix (%s) 1`] = `
DOMTokenList {
  "0": "resize-bounding-container",
  "1": "resize-bounding-container-0",
}
`;

exports[`ResizeBounding > components > Should not display any selected borders when set to "disabled" (--b) 1`] = `0`;

exports[`ResizeBounding > components > Should not display any selected borders when set to "disabled" (--h) 1`] = `0`;

exports[`ResizeBounding > components > Should not display any selected borders when set to "disabled" (--l) 1`] = `0`;

exports[`ResizeBounding > components > Should not display any selected borders when set to "disabled" (--r) 1`] = `0`;

exports[`ResizeBounding > components > Should not display any selected borders when set to "disabled" (--t) 1`] = `0`;

exports[`ResizeBounding > components > Should not display any selected borders when set to "disabled" (--v) 1`] = `0`;

exports[`ResizeBounding > components > should not render any pane element 1`] = `0`;

exports[`ResizeBounding > components > should not render any pane element 2`] = `0`;

exports[`ResizeBounding > components > should not render any pane element 3`] = `0`;

exports[`ResizeBounding > components > should render bl panes (panes computed value) 1`] = `2`;

exports[`ResizeBounding > components > should render bltr panes (panes computed value) 1`] = `4`;

exports[`ResizeBounding > components > should render ltrb panes (panes computed value) 1`] = `4`;

exports[`ResizeBounding > components > should render rl panes (panes computed value) 1`] = `2`;

exports[`ResizeBounding > components > should render tr panes (panes computed value) 1`] = `2`;

exports[`ResizeBounding > events > drag > should emit the "dragStart -> dragMove -> dragEnd" event, which takes a direction argument "b" 1`] = `Promise {}`;

exports[`ResizeBounding > events > drag > should emit the "dragStart -> dragMove -> dragEnd" event, which takes a direction argument "l" 1`] = `Promise {}`;

exports[`ResizeBounding > events > drag > should emit the "dragStart -> dragMove -> dragEnd" event, which takes a direction argument "r" 1`] = `Promise {}`;

exports[`ResizeBounding > events > drag > should emit the "dragStart -> dragMove -> dragEnd" event, which takes a direction argument "t" 1`] = `Promise {}`;

exports[`ResizeBounding > slots > should render default slot "Inner Container" 1`] = `"Inner Container"`;

exports[`ResizeBounding > slots > should render default slot 1`] = `"knob"`;

exports[`ResizeBounding > styles > container > should apply inline styles ({ background: 'blue', display: 'flex' }) 1`] = `"background: blue; display: flex;"`;
